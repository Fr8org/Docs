@model HubWeb.ViewModels.LoginVM
@{
    ViewBag.title = "Log in";
}

<link href="/Content/templates/metronic/assets/global/css/components.css" id="style_components" rel="stylesheet" type="text/css" />
<link href="/Content/templates/metronic/assets/admin/layout3/css/layout.css" rel="stylesheet" type="text/css" />

@Html.Partial("~/Views/DockyardAccount/_HeaderPartial.cshtml")

<div class="container-fluid login-container">
    <div class="row-fluid">
        <div class="col-md-8 col-md-offset-2 col-sm-12">
            <div class="row-fluid">
                <div class="col-sm-6 login-block">
                    <div class="row-fluid">
                        <h1 class="col-md-offset-3">Login</h1><br>
                    </div>
                    <div class="row-fluid">
                        <!-- BEGIN FORM-->
                        <section id="loginform">
                            @using (Html.BeginForm("login", "dockyardaccount", new { returnUrl = ViewBag.returnUrl }, FormMethod.Post, new { @class = "form-horizontal form-bordered ", role = "form" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary(true)
                                <div class="form-body">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.Email, new { @class = "control-label col-md-3" })
                                        <div class="col-sm-10 col-md-7">
                                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                                            <div class="help-block">
                                                @Html.ValidationMessageFor(m => m.Email)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.Password, new { @class = "control-label col-md-3" })
                                        <div class="col-sm-10 col-md-7">
                                            @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                                            <span class="help-block">
                                                @Html.ValidationMessageFor(m => m.Password)
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-actions">
                                    <div class="form-group">
                                        <div class="col-md-offset-3 col-sm-9">
                                            <button type="submit" class="btn purple">Log in</button>
                                            <span class="help-block">
                                                @Html.ActionLink("Forgot Password?", "ForgotPassword", "DockyardAccount")
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </section>
                        <!-- END FORM-->
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="row-fluid">
                        <h1 class="col-sm-offset-2">Register</h1><br>
                    </div>
                    <div class="row-fluid">
                        <a href="/DockyardAccount/Register" class="btn green col-sm-offset-2">Create Account</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(function () {
        var segmentKey = '@Fr8.Infrastructure.Utilities.Configuration.CloudConfigurationManager.GetSetting("SegmentWriteKey")';
        if (segmentKey !== "") {
            window.analytics = window.analytics || [], window.analytics.methods = ["identify", "group", "track", "page", "pageview", "alias", "ready", "on", "once", "off", "trackLink", "trackForm", "trackClick", "trackSubmit"], window.analytics.factory = function (t) {
                return function () {
                    var a = Array.prototype.slice.call(arguments);
                    return a.unshift(t), window.analytics.push(a), window.analytics
                }
            };
            for (var i = 0; i < window.analytics.methods.length; i++) {
                var key = window.analytics.methods[i];
                window.analytics[key] = window.analytics.factory(key)
            }
            window.analytics.load = function (t) {
                if (!document.getElementById("analytics-js")) {
                    var a = document.createElement("script");
                    a.type = "text/javascript", a.id = "analytics-js", a.async = !0, a.src = ("https:" === document.location.protocol ? "https://" : "http://") + "cdn.segment.io/analytics.js/v1/" + t + "/analytics.min.js";
                    var n = document.getElementsByTagName("script")[0];
                    n.parentNode.insertBefore(a, n)
                }
            }, window.analytics.SNIPPET_VERSION = "2.0.9",
                window.analytics.load(segmentKey);
            window.analytics.page('Visited Page - Log In');
        }
        var actionWithoutHash = $('form').attr('action');
        $('form').attr('action', actionWithoutHash + window.location.hash);
    });
</script>
